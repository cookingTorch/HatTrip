<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- name space는 UserRepo의 fully qualified name으로 설정한다. -->
<mapper namespace="com.ssafy.mapper.HotplaceMapper">

	<resultMap id="hotplaceMap" type="com.ssafy.dto.HotplaceDto">
	    <result property="hotplaceId" column="hotplace_id" />
	    <result property="userId" column="user_id" />
	    <result property="contentTypeId" column="content_type_id" />
	    <result property="title" column="title" />
	    <result property="addr1" column="addr1" />
	    <result property="addr2" column="addr2" />
	    <result property="tel" column="tel" />
	    <result property="imageSrc" column="image_src" />
	    <result property="sidoCode" column="sido_code" />
	    <result property="gugunCode" column="gugun_code" />
	    <result property="latitude" column="latitude" />
	    <result property="longitude" column="longitude" />
	    <result property="contentType" column="content_type" />
	    <result property="description" column="description" />
	</resultMap>
	
	<resultMap id="contentTypeMap" type="com.ssafy.dto.ContentTypeDto">
		<result property="contentTypeId" column="content_type_id" />
		<result property="contentType" column="content_type" />
	</resultMap>

	<!-- getSidoCode. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="getSidoCode">
		SELECT sido_code
		FROM sido
		WHERE sido_name = #{sidoName}
	</select>
	
	<!-- getGugunCode. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="getGugunCode">
		SELECT gugun_code
		FROM gugun
		WHERE sido_code = #{sidoCode}
		AND gugun_name = #{gugunName}
	</select>
	
	<!-- registHotplace. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<insert id="registHotplace" parameterType="com.ssafy.dto.HotplaceDto" useGeneratedKeys="true" keyProperty="hotplaceId">
		INSERT INTO hotplace_info (user_id, content_type_id, title, addr1, tel, image_src, sido_code, gugun_code, latitude, longitude)
		VALUES (#{userId}, #{contentTypeId}, #{title}, #{addr1}, #{tel}, #{imageSrc}, #{sidoCode}, #{gugunCode}, #{latitude}, #{longitude})
	</insert>
	
	<!-- registDescription. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<insert id="registDescription">
		INSERT INTO hotplace_description (hotplace_id, overview)
		VALUES (#{hotplaceId}, #{description})
	</insert>
	
	<!-- updateImageSrc. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<update id="updateImageSrc" parameterType="com.ssafy.dto.HotplaceDto">
		UPDATE hotplace_info
		SET image_src = #{imageSrc}
		WHERE hotplace_id = #{hotplaceId}
	</update>
	
	<!-- listHotplaces. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="listHotplaces" resultMap="hotplaceMap">
	    SELECT h.*, c.content_type, d.overview AS description,
	        CASE WHEN l.user_id IS NOT NULL THEN true ELSE false END AS liked
	    FROM hotplace_info h
	    JOIN content_type c ON h.content_type_id = c.content_type_id
	    LEFT JOIN hotplace_description d ON h.hotplace_id = d.hotplace_id
	    LEFT JOIN hotplace_like l ON h.hotplace_id = l.hotplace_id AND l.user_id = #{loginUser}
	    <if test="likes">
	        WHERE l.user_id = #{loginUser}
	    </if>
	    ORDER BY h.hotplace_id DESC
	    LIMIT #{placesPerPage} OFFSET #{offset}
	</select>
	
	<!-- countHotplaces. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="countHotplaces">
	    SELECT COUNT(*)
	    FROM hotplace_info h
	    <if test="likes">
	        JOIN hotplace_like l ON h.hotplace_id = l.hotplace_id AND l.user_id = #{loginUser}
	    </if>
	</select>
	
	<!-- getHotplace. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="getHotplace" resultMap="hotplaceMap">
	    SELECT h.*, c.content_type, d.overview AS description,
	        CASE WHEN l.user_id IS NOT NULL THEN true ELSE false END AS liked
	    FROM hotplace_info h
	    JOIN content_type c ON h.content_type_id = c.content_type_id
	    LEFT JOIN hotplace_description d ON h.hotplace_id = d.hotplace_id
	    LEFT JOIN hotplace_like l ON h.hotplace_id = l.hotplace_id AND l.user_id = #{loginUser}
	    WHERE h.hotplace_id = #{hotplaceId}
	</select>
	
	<!-- deleteHotplace. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<delete id="deleteHotplace">
	    DELETE FROM hotplace_info
	    WHERE hotplace_id = #{hotplaceId}
	</delete>
	
	<!-- listContentTypes. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="listContentTypes" resultType="com.ssafy.dto.ContentTypeDto" resultMap="contentTypeMap">
		SELECT *
		FROM content_type
	</select>
	
	<!-- searchHotplaces. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="searchHotplaces" resultMap="hotplaceMap">
	    SELECT h.*, c.content_type, d.overview AS description,
	        CASE WHEN l.user_id IS NOT NULL THEN true ELSE false END AS liked
	    FROM hotplace_info h
	    JOIN content_type c ON h.content_type_id = c.content_type_id
	    LEFT JOIN hotplace_description d ON h.hotplace_id = d.hotplace_id
	    LEFT JOIN hotplace_like l ON h.hotplace_id = l.hotplace_id AND l.user_id = #{loginUser}
	    <where>
	        <if test="likes">
	            l.user_id = #{loginUser}
	        </if>
	        AND ${searchType} LIKE CONCAT('%', #{keyword}, '%')
	    </where>
	    ORDER BY h.hotplace_id DESC
	    LIMIT #{placesPerPage} OFFSET #{offset}
	</select>

	<!-- countSearchedPlaces. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="countSearchedPlaces">
	    SELECT COUNT(*)
	    FROM hotplace_info h
	    <if test="likes">
	        JOIN hotplace_like l ON h.hotplace_id = l.hotplace_id AND l.user_id = #{loginUser}
	    </if>
	    WHERE ${searchType} LIKE CONCAT('%', #{keyword}, '%')
	</select>

	<!-- searchContentTypeIds. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="searchContentTypeIds">
		SELECT content_type_id
		FROM content_type
		WHERE content_type LIKE CONCAT('%', #{keyword}, '%')
		ORDER BY content_type_id ASC
	</select>
	
	<!-- searchHotplacesByTypeIds. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="searchHotplacesByTypeIds" resultMap="hotplaceMap">
	    SELECT h.*, c.content_type, d.overview AS description,
	        CASE WHEN l.user_id IS NOT NULL THEN true ELSE false END AS liked
	    FROM hotplace_info h
	    JOIN content_type c ON h.content_type_id = c.content_type_id
	    LEFT JOIN hotplace_description d ON h.hotplace_id = d.hotplace_id
	    LEFT JOIN hotplace_like l ON h.hotplace_id = l.hotplace_id AND l.user_id = #{loginUser}
	    <where>
	        <if test="likes">
	            l.user_id = #{loginUser}
	        </if>
	        AND h.content_type_id IN
	        <foreach item="item" index="index" collection="contentTypeIds" open="(" separator="," close=")">
	            #{item}
	        </foreach>
	    </where>
	    ORDER BY h.hotplace_id DESC
	    LIMIT #{placesPerPage} OFFSET #{offset}
	</select>

	<!-- countSearchedPlacesByTypeIds. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="countSearchedPlacesByTypeIds">
	    SELECT COUNT(*)
	    FROM hotplace_info h
	    <if test="likes">
	        JOIN hotplace_like l ON h.hotplace_id = l.hotplace_id AND l.user_id = #{loginUser}
	    </if>
	    WHERE content_type_id IN
	    <foreach item="item" index="index" collection="contentTypeIds" open="(" separator="," close=")">
	        #{item}
	    </foreach>
	</select>

	<!-- getImageSrcByHotplaceId. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="getImageSrcByHotplaceId">
		SELECT image_src
		FROM hotplace_info
		WHERE hotplace_id = #{hotplaceId}
	</select>
	
	<!-- addLike. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<insert id="addLike">
		INSERT INTO hotplace_like (user_id, hotplace_id)
		VALUES (#{userId}, #{hotplaceId})
	</insert>
	
	<!-- deleteLike. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<delete id="deleteLike">
		DELETE FROM hotplace_like
	    WHERE user_id = #{userId}
	    AND hotplace_id = #{hotplaceId}
	</delete>
	
	<!-- likeExists. id는 repo클래스의 메소드 이름과 일치시킨다. -->
	<select id="likeExists">
		SELECT CASE WHEN COUNT(*) > 0 THEN true ELSE false END
        FROM hotplace_like
        WHERE user_id = #{userId}
        AND hotplace_id = #{hotplaceId}
	</select>
	
</mapper>